// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/user/user.proto

package userconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/Mitra-Apps/be-user-service/domain/proto/user"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "proto.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUsersProcedure is the fully-qualified name of the UserService's GetUsers RPC.
	UserServiceGetUsersProcedure = "/proto.UserService/GetUsers"
	// UserServiceLoginProcedure is the fully-qualified name of the UserService's Login RPC.
	UserServiceLoginProcedure = "/proto.UserService/Login"
	// UserServiceRegisterProcedure is the fully-qualified name of the UserService's Register RPC.
	UserServiceRegisterProcedure = "/proto.UserService/Register"
	// UserServiceCreateRoleProcedure is the fully-qualified name of the UserService's CreateRole RPC.
	UserServiceCreateRoleProcedure = "/proto.UserService/CreateRole"
	// UserServiceGetRoleProcedure is the fully-qualified name of the UserService's GetRole RPC.
	UserServiceGetRoleProcedure = "/proto.UserService/GetRole"
	// UserServiceVerifyOtpProcedure is the fully-qualified name of the UserService's VerifyOtp RPC.
	UserServiceVerifyOtpProcedure = "/proto.UserService/VerifyOtp"
	// UserServiceResendOtpProcedure is the fully-qualified name of the UserService's ResendOtp RPC.
	UserServiceResendOtpProcedure = "/proto.UserService/ResendOtp"
	// UserServiceGetOwnDataProcedure is the fully-qualified name of the UserService's GetOwnData RPC.
	UserServiceGetOwnDataProcedure = "/proto.UserService/GetOwnData"
	// UserServiceChangePasswordProcedure is the fully-qualified name of the UserService's
	// ChangePassword RPC.
	UserServiceChangePasswordProcedure = "/proto.UserService/ChangePassword"
	// UserServiceLogoutProcedure is the fully-qualified name of the UserService's Logout RPC.
	UserServiceLogoutProcedure = "/proto.UserService/Logout"
	// UserServiceRefreshTokenProcedure is the fully-qualified name of the UserService's RefreshToken
	// RPC.
	UserServiceRefreshTokenProcedure = "/proto.UserService/RefreshToken"
	// UserServiceSetEnvVariableProcedure is the fully-qualified name of the UserService's
	// SetEnvVariable RPC.
	UserServiceSetEnvVariableProcedure = "/proto.UserService/SetEnvVariable"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor              = user.File_proto_user_user_proto.Services().ByName("UserService")
	userServiceGetUsersMethodDescriptor       = userServiceServiceDescriptor.Methods().ByName("GetUsers")
	userServiceLoginMethodDescriptor          = userServiceServiceDescriptor.Methods().ByName("Login")
	userServiceRegisterMethodDescriptor       = userServiceServiceDescriptor.Methods().ByName("Register")
	userServiceCreateRoleMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("CreateRole")
	userServiceGetRoleMethodDescriptor        = userServiceServiceDescriptor.Methods().ByName("GetRole")
	userServiceVerifyOtpMethodDescriptor      = userServiceServiceDescriptor.Methods().ByName("VerifyOtp")
	userServiceResendOtpMethodDescriptor      = userServiceServiceDescriptor.Methods().ByName("ResendOtp")
	userServiceGetOwnDataMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("GetOwnData")
	userServiceChangePasswordMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("ChangePassword")
	userServiceLogoutMethodDescriptor         = userServiceServiceDescriptor.Methods().ByName("Logout")
	userServiceRefreshTokenMethodDescriptor   = userServiceServiceDescriptor.Methods().ByName("RefreshToken")
	userServiceSetEnvVariableMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("SetEnvVariable")
)

// UserServiceClient is a client for the proto.UserService service.
type UserServiceClient interface {
	GetUsers(context.Context, *connect.Request[user.GetUsersRequest]) (*connect.Response[user.GetUsersResponse], error)
	Login(context.Context, *connect.Request[user.UserLoginRequest]) (*connect.Response[user.SuccessResponse], error)
	Register(context.Context, *connect.Request[user.UserRegisterRequest]) (*connect.Response[user.SuccessResponse], error)
	CreateRole(context.Context, *connect.Request[user.Role]) (*connect.Response[user.SuccessResponse], error)
	GetRole(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error)
	VerifyOtp(context.Context, *connect.Request[user.VerifyOTPRequest]) (*connect.Response[user.SuccessResponse], error)
	ResendOtp(context.Context, *connect.Request[user.ResendOTPRequest]) (*connect.Response[user.SuccessResponse], error)
	GetOwnData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error)
	ChangePassword(context.Context, *connect.Request[user.ChangePasswordRequest]) (*connect.Response[user.SuccessResponse], error)
	Logout(context.Context, *connect.Request[user.LogoutRequest]) (*connect.Response[user.SuccessResponse], error)
	RefreshToken(context.Context, *connect.Request[user.TokenRequest]) (*connect.Response[user.SuccessResponse], error)
	SetEnvVariable(context.Context, *connect.Request[user.EnvRequest]) (*connect.Response[user.SuccessResponse], error)
}

// NewUserServiceClient constructs a client for the proto.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getUsers: connect.NewClient[user.GetUsersRequest, user.GetUsersResponse](
			httpClient,
			baseURL+UserServiceGetUsersProcedure,
			connect.WithSchema(userServiceGetUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[user.UserLoginRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceLoginProcedure,
			connect.WithSchema(userServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[user.UserRegisterRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceRegisterProcedure,
			connect.WithSchema(userServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[user.Role, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceCreateRoleProcedure,
			connect.WithSchema(userServiceCreateRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[emptypb.Empty, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceGetRoleProcedure,
			connect.WithSchema(userServiceGetRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		verifyOtp: connect.NewClient[user.VerifyOTPRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceVerifyOtpProcedure,
			connect.WithSchema(userServiceVerifyOtpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resendOtp: connect.NewClient[user.ResendOTPRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceResendOtpProcedure,
			connect.WithSchema(userServiceResendOtpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOwnData: connect.NewClient[emptypb.Empty, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceGetOwnDataProcedure,
			connect.WithSchema(userServiceGetOwnDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[user.ChangePasswordRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceChangePasswordProcedure,
			connect.WithSchema(userServiceChangePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[user.LogoutRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceLogoutProcedure,
			connect.WithSchema(userServiceLogoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[user.TokenRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceRefreshTokenProcedure,
			connect.WithSchema(userServiceRefreshTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setEnvVariable: connect.NewClient[user.EnvRequest, user.SuccessResponse](
			httpClient,
			baseURL+UserServiceSetEnvVariableProcedure,
			connect.WithSchema(userServiceSetEnvVariableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUsers       *connect.Client[user.GetUsersRequest, user.GetUsersResponse]
	login          *connect.Client[user.UserLoginRequest, user.SuccessResponse]
	register       *connect.Client[user.UserRegisterRequest, user.SuccessResponse]
	createRole     *connect.Client[user.Role, user.SuccessResponse]
	getRole        *connect.Client[emptypb.Empty, user.SuccessResponse]
	verifyOtp      *connect.Client[user.VerifyOTPRequest, user.SuccessResponse]
	resendOtp      *connect.Client[user.ResendOTPRequest, user.SuccessResponse]
	getOwnData     *connect.Client[emptypb.Empty, user.SuccessResponse]
	changePassword *connect.Client[user.ChangePasswordRequest, user.SuccessResponse]
	logout         *connect.Client[user.LogoutRequest, user.SuccessResponse]
	refreshToken   *connect.Client[user.TokenRequest, user.SuccessResponse]
	setEnvVariable *connect.Client[user.EnvRequest, user.SuccessResponse]
}

// GetUsers calls proto.UserService.GetUsers.
func (c *userServiceClient) GetUsers(ctx context.Context, req *connect.Request[user.GetUsersRequest]) (*connect.Response[user.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// Login calls proto.UserService.Login.
func (c *userServiceClient) Login(ctx context.Context, req *connect.Request[user.UserLoginRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls proto.UserService.Register.
func (c *userServiceClient) Register(ctx context.Context, req *connect.Request[user.UserRegisterRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// CreateRole calls proto.UserService.CreateRole.
func (c *userServiceClient) CreateRole(ctx context.Context, req *connect.Request[user.Role]) (*connect.Response[user.SuccessResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// GetRole calls proto.UserService.GetRole.
func (c *userServiceClient) GetRole(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// VerifyOtp calls proto.UserService.VerifyOtp.
func (c *userServiceClient) VerifyOtp(ctx context.Context, req *connect.Request[user.VerifyOTPRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.verifyOtp.CallUnary(ctx, req)
}

// ResendOtp calls proto.UserService.ResendOtp.
func (c *userServiceClient) ResendOtp(ctx context.Context, req *connect.Request[user.ResendOTPRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.resendOtp.CallUnary(ctx, req)
}

// GetOwnData calls proto.UserService.GetOwnData.
func (c *userServiceClient) GetOwnData(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error) {
	return c.getOwnData.CallUnary(ctx, req)
}

// ChangePassword calls proto.UserService.ChangePassword.
func (c *userServiceClient) ChangePassword(ctx context.Context, req *connect.Request[user.ChangePasswordRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// Logout calls proto.UserService.Logout.
func (c *userServiceClient) Logout(ctx context.Context, req *connect.Request[user.LogoutRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls proto.UserService.RefreshToken.
func (c *userServiceClient) RefreshToken(ctx context.Context, req *connect.Request[user.TokenRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// SetEnvVariable calls proto.UserService.SetEnvVariable.
func (c *userServiceClient) SetEnvVariable(ctx context.Context, req *connect.Request[user.EnvRequest]) (*connect.Response[user.SuccessResponse], error) {
	return c.setEnvVariable.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the proto.UserService service.
type UserServiceHandler interface {
	GetUsers(context.Context, *connect.Request[user.GetUsersRequest]) (*connect.Response[user.GetUsersResponse], error)
	Login(context.Context, *connect.Request[user.UserLoginRequest]) (*connect.Response[user.SuccessResponse], error)
	Register(context.Context, *connect.Request[user.UserRegisterRequest]) (*connect.Response[user.SuccessResponse], error)
	CreateRole(context.Context, *connect.Request[user.Role]) (*connect.Response[user.SuccessResponse], error)
	GetRole(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error)
	VerifyOtp(context.Context, *connect.Request[user.VerifyOTPRequest]) (*connect.Response[user.SuccessResponse], error)
	ResendOtp(context.Context, *connect.Request[user.ResendOTPRequest]) (*connect.Response[user.SuccessResponse], error)
	GetOwnData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error)
	ChangePassword(context.Context, *connect.Request[user.ChangePasswordRequest]) (*connect.Response[user.SuccessResponse], error)
	Logout(context.Context, *connect.Request[user.LogoutRequest]) (*connect.Response[user.SuccessResponse], error)
	RefreshToken(context.Context, *connect.Request[user.TokenRequest]) (*connect.Response[user.SuccessResponse], error)
	SetEnvVariable(context.Context, *connect.Request[user.EnvRequest]) (*connect.Response[user.SuccessResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceGetUsersHandler := connect.NewUnaryHandler(
		UserServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(userServiceGetUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLoginHandler := connect.NewUnaryHandler(
		UserServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(userServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRegisterHandler := connect.NewUnaryHandler(
		UserServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(userServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateRoleHandler := connect.NewUnaryHandler(
		UserServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(userServiceCreateRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetRoleHandler := connect.NewUnaryHandler(
		UserServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(userServiceGetRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceVerifyOtpHandler := connect.NewUnaryHandler(
		UserServiceVerifyOtpProcedure,
		svc.VerifyOtp,
		connect.WithSchema(userServiceVerifyOtpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceResendOtpHandler := connect.NewUnaryHandler(
		UserServiceResendOtpProcedure,
		svc.ResendOtp,
		connect.WithSchema(userServiceResendOtpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetOwnDataHandler := connect.NewUnaryHandler(
		UserServiceGetOwnDataProcedure,
		svc.GetOwnData,
		connect.WithSchema(userServiceGetOwnDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangePasswordHandler := connect.NewUnaryHandler(
		UserServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(userServiceChangePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLogoutHandler := connect.NewUnaryHandler(
		UserServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(userServiceLogoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRefreshTokenHandler := connect.NewUnaryHandler(
		UserServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(userServiceRefreshTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSetEnvVariableHandler := connect.NewUnaryHandler(
		UserServiceSetEnvVariableProcedure,
		svc.SetEnvVariable,
		connect.WithSchema(userServiceSetEnvVariableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUsersProcedure:
			userServiceGetUsersHandler.ServeHTTP(w, r)
		case UserServiceLoginProcedure:
			userServiceLoginHandler.ServeHTTP(w, r)
		case UserServiceRegisterProcedure:
			userServiceRegisterHandler.ServeHTTP(w, r)
		case UserServiceCreateRoleProcedure:
			userServiceCreateRoleHandler.ServeHTTP(w, r)
		case UserServiceGetRoleProcedure:
			userServiceGetRoleHandler.ServeHTTP(w, r)
		case UserServiceVerifyOtpProcedure:
			userServiceVerifyOtpHandler.ServeHTTP(w, r)
		case UserServiceResendOtpProcedure:
			userServiceResendOtpHandler.ServeHTTP(w, r)
		case UserServiceGetOwnDataProcedure:
			userServiceGetOwnDataHandler.ServeHTTP(w, r)
		case UserServiceChangePasswordProcedure:
			userServiceChangePasswordHandler.ServeHTTP(w, r)
		case UserServiceLogoutProcedure:
			userServiceLogoutHandler.ServeHTTP(w, r)
		case UserServiceRefreshTokenProcedure:
			userServiceRefreshTokenHandler.ServeHTTP(w, r)
		case UserServiceSetEnvVariableProcedure:
			userServiceSetEnvVariableHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUsers(context.Context, *connect.Request[user.GetUsersRequest]) (*connect.Response[user.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.GetUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) Login(context.Context, *connect.Request[user.UserLoginRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.Login is not implemented"))
}

func (UnimplementedUserServiceHandler) Register(context.Context, *connect.Request[user.UserRegisterRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.Register is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateRole(context.Context, *connect.Request[user.Role]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.CreateRole is not implemented"))
}

func (UnimplementedUserServiceHandler) GetRole(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.GetRole is not implemented"))
}

func (UnimplementedUserServiceHandler) VerifyOtp(context.Context, *connect.Request[user.VerifyOTPRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.VerifyOtp is not implemented"))
}

func (UnimplementedUserServiceHandler) ResendOtp(context.Context, *connect.Request[user.ResendOTPRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.ResendOtp is not implemented"))
}

func (UnimplementedUserServiceHandler) GetOwnData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.GetOwnData is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangePassword(context.Context, *connect.Request[user.ChangePasswordRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.ChangePassword is not implemented"))
}

func (UnimplementedUserServiceHandler) Logout(context.Context, *connect.Request[user.LogoutRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.Logout is not implemented"))
}

func (UnimplementedUserServiceHandler) RefreshToken(context.Context, *connect.Request[user.TokenRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.RefreshToken is not implemented"))
}

func (UnimplementedUserServiceHandler) SetEnvVariable(context.Context, *connect.Request[user.EnvRequest]) (*connect.Response[user.SuccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.UserService.SetEnvVariable is not implemented"))
}
