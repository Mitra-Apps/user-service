syntax = "proto3";

package proto;

option go_package = "github.com/Mitra-Apps/be-user-service/domain/proto/user;user";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/struct.proto";

message User {
    string id = 1;
    string username = 2;
    string password = 3;
    string email = 4;
    string phone_number = 5;
    string avatar_image_id = 6;
    string access_token = 7;
    bool is_active = 8;
    bool is_verified = 9;
    string name = 10;
    string address = 11;
}

message Role {
    string id = 1;
    string role_name = 2;
    string description = 3;
    bool is_active = 4;
    google.protobuf.Struct permission = 5;
}

message ListRole {
    repeated Role roles = 1;
}

message UserLoginRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string = {min_len: 6; max_len: 8}];
}

message UserRegisterRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string = {min_len: 6; max_len: 8}];
    string name = 3 [(validate.rules).string = {min_len: 1, max_len: 255}]; 
    string phone_number = 4 [(validate.rules).string = {min_len: 9, max_len: 14}];
    string address = 5 ;
    repeated string role_id = 6;
}

message SuccessResponse {
    int32 code = 1;
    string message = 2;
    google.protobuf.Struct data = 3;
}

message GetUsersRequest {}

message GetUsersResponse {
    repeated User users = 1;
}

message VerifyOTPRequest {
    string email = 1;
    int32 otp_code = 2;
}

message ResendOTPRequest {
    string email = 1;
}

message ResendOTPResponse {
    int32 otp_code = 2;
}

message ChangePasswordRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string = {min_len: 6; max_len: 8}];
    int32 otp_code = 3;
}

message LogoutRequest {
    string email = 1 [(validate.rules).string.email = true];
}

message TokenRequest {
    string refresh_token = 1;
}

message EnvRequest {
    string variable = 1;
    string value = 2;
}


service UserService {
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
            get: "/api/v1/users"
        };
    }
    rpc Login(UserLoginRequest) returns (SuccessResponse) {
        option (google.api.http) = {
            post: "/api/v1/users/login"
            body:"*"
        };
    }
    rpc Register(UserRegisterRequest) returns (SuccessResponse) {
        option (google.api.http) = {
            post: "/api/v1/users/register"
            body: "*"
        };
    }
    rpc CreateRole(Role) returns (SuccessResponse) {
        option (google.api.http) = {
            post: "/api/v1/users/createrole"
            body: "*"
        };
    }
    rpc GetRole(google.protobuf.Empty) returns (SuccessResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/getrole"
        };
    }
    rpc VerifyOtp(VerifyOTPRequest) returns (SuccessResponse) {
        option (google.api.http) = {
            post: "/api/v1/users/verify-token"
            body: "*"
        };
    }
    rpc ResendOtp(ResendOTPRequest) returns (SuccessResponse) {
        option (google.api.http) = {
            post: "/api/v1/users/resend-otp"
            body: "*"
        };
    }
    rpc GetOwnData(google.protobuf.Empty) returns (SuccessResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/getdata"
        };
    }
    rpc ChangePassword(ChangePasswordRequest) returns (SuccessResponse) {
         option (google.api.http) = {
            post: "/api/v1/users/change-password"
            body: "*"
        };
    }
    rpc Logout(LogoutRequest) returns (SuccessResponse) {
         option (google.api.http) = {
            post: "/api/v1/users/logout"
            body: "*"
        };
    }
    rpc RefreshToken(TokenRequest) returns (SuccessResponse) {
         option (google.api.http) = {
            post: "/api/v1/users/refresh-token"
            body: "*"
        };
    }
    rpc SetEnvVariable(EnvRequest) returns (SuccessResponse) {
         option (google.api.http) = {
            post: "/api/v1/config/set-variable"
            body: "*"
        };
    }
}