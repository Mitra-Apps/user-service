// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	utility "github.com/Mitra-Apps/be-utility-service/domain/proto/utility"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// GetEnvVariable mocks base method.
func (m *MockServiceInterface) GetEnvVariable(ctx context.Context, req *utility.GetEnvVariableReq) (*utility.GetEnvVariableRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvVariable", ctx, req)
	ret0, _ := ret[0].(*utility.GetEnvVariableRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvVariable indicates an expected call of GetEnvVariable.
func (mr *MockServiceInterfaceMockRecorder) GetEnvVariable(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvVariable", reflect.TypeOf((*MockServiceInterface)(nil).GetEnvVariable), ctx, req)
}

// SendOtpMail mocks base method.
func (m *MockServiceInterface) SendOtpMail(ctx context.Context, req *utility.OtpMailReq) (*utility.UtilSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtpMail", ctx, req)
	ret0, _ := ret[0].(*utility.UtilSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOtpMail indicates an expected call of SendOtpMail.
func (mr *MockServiceInterfaceMockRecorder) SendOtpMail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtpMail", reflect.TypeOf((*MockServiceInterface)(nil).SendOtpMail), ctx, req)
}

// UpsertEnvVariable mocks base method.
func (m *MockServiceInterface) UpsertEnvVariable(ctx context.Context, req *utility.UpsertEnvVariableReq) (*utility.UtilSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEnvVariable", ctx, req)
	ret0, _ := ret[0].(*utility.UtilSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEnvVariable indicates an expected call of UpsertEnvVariable.
func (mr *MockServiceInterfaceMockRecorder) UpsertEnvVariable(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEnvVariable", reflect.TypeOf((*MockServiceInterface)(nil).UpsertEnvVariable), ctx, req)
}
