// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go
//
// Generated by this command:
//
//	mockgen -source=redis.go -destination=mock/redis.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisInterface is a mock of RedisInterface interface.
type MockRedisInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisInterfaceMockRecorder
}

// MockRedisInterfaceMockRecorder is the mock recorder for MockRedisInterface.
type MockRedisInterfaceMockRecorder struct {
	mock *MockRedisInterface
}

// NewMockRedisInterface creates a new mock instance.
func NewMockRedisInterface(ctrl *gomock.Controller) *MockRedisInterface {
	mock := &MockRedisInterface{ctrl: ctrl}
	mock.recorder = &MockRedisInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisInterface) EXPECT() *MockRedisInterfaceMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockRedisInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockRedisInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockRedisInterface)(nil).GetContext))
}

// GetStringKey mocks base method.
func (m *MockRedisInterface) GetStringKey(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringKey indicates an expected call of GetStringKey.
func (mr *MockRedisInterfaceMockRecorder) GetStringKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringKey", reflect.TypeOf((*MockRedisInterface)(nil).GetStringKey), ctx, key)
}

// Set mocks base method.
func (m *MockRedisInterface) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisInterfaceMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisInterface)(nil).Set), ctx, key, value, expiration)
}
